// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type DisableProductVerifiersService struct {
	DisableProductVerifiersStub        func([]string, string) error
	disableProductVerifiersMutex       sync.RWMutex
	disableProductVerifiersArgsForCall []struct {
		arg1 []string
		arg2 string
	}
	disableProductVerifiersReturns struct {
		result1 error
	}
	disableProductVerifiersReturnsOnCall map[int]struct {
		result1 error
	}
	ListProductVerifiersStub        func(string) ([]api.Verifier, string, error)
	listProductVerifiersMutex       sync.RWMutex
	listProductVerifiersArgsForCall []struct {
		arg1 string
	}
	listProductVerifiersReturns struct {
		result1 []api.Verifier
		result2 string
		result3 error
	}
	listProductVerifiersReturnsOnCall map[int]struct {
		result1 []api.Verifier
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DisableProductVerifiersService) DisableProductVerifiers(arg1 []string, arg2 string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.disableProductVerifiersMutex.Lock()
	ret, specificReturn := fake.disableProductVerifiersReturnsOnCall[len(fake.disableProductVerifiersArgsForCall)]
	fake.disableProductVerifiersArgsForCall = append(fake.disableProductVerifiersArgsForCall, struct {
		arg1 []string
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("DisableProductVerifiers", []interface{}{arg1Copy, arg2})
	fake.disableProductVerifiersMutex.Unlock()
	if fake.DisableProductVerifiersStub != nil {
		return fake.DisableProductVerifiersStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.disableProductVerifiersReturns
	return fakeReturns.result1
}

func (fake *DisableProductVerifiersService) DisableProductVerifiersCallCount() int {
	fake.disableProductVerifiersMutex.RLock()
	defer fake.disableProductVerifiersMutex.RUnlock()
	return len(fake.disableProductVerifiersArgsForCall)
}

func (fake *DisableProductVerifiersService) DisableProductVerifiersCalls(stub func([]string, string) error) {
	fake.disableProductVerifiersMutex.Lock()
	defer fake.disableProductVerifiersMutex.Unlock()
	fake.DisableProductVerifiersStub = stub
}

func (fake *DisableProductVerifiersService) DisableProductVerifiersArgsForCall(i int) ([]string, string) {
	fake.disableProductVerifiersMutex.RLock()
	defer fake.disableProductVerifiersMutex.RUnlock()
	argsForCall := fake.disableProductVerifiersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DisableProductVerifiersService) DisableProductVerifiersReturns(result1 error) {
	fake.disableProductVerifiersMutex.Lock()
	defer fake.disableProductVerifiersMutex.Unlock()
	fake.DisableProductVerifiersStub = nil
	fake.disableProductVerifiersReturns = struct {
		result1 error
	}{result1}
}

func (fake *DisableProductVerifiersService) DisableProductVerifiersReturnsOnCall(i int, result1 error) {
	fake.disableProductVerifiersMutex.Lock()
	defer fake.disableProductVerifiersMutex.Unlock()
	fake.DisableProductVerifiersStub = nil
	if fake.disableProductVerifiersReturnsOnCall == nil {
		fake.disableProductVerifiersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableProductVerifiersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DisableProductVerifiersService) ListProductVerifiers(arg1 string) ([]api.Verifier, string, error) {
	fake.listProductVerifiersMutex.Lock()
	ret, specificReturn := fake.listProductVerifiersReturnsOnCall[len(fake.listProductVerifiersArgsForCall)]
	fake.listProductVerifiersArgsForCall = append(fake.listProductVerifiersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListProductVerifiers", []interface{}{arg1})
	fake.listProductVerifiersMutex.Unlock()
	if fake.ListProductVerifiersStub != nil {
		return fake.ListProductVerifiersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.listProductVerifiersReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *DisableProductVerifiersService) ListProductVerifiersCallCount() int {
	fake.listProductVerifiersMutex.RLock()
	defer fake.listProductVerifiersMutex.RUnlock()
	return len(fake.listProductVerifiersArgsForCall)
}

func (fake *DisableProductVerifiersService) ListProductVerifiersCalls(stub func(string) ([]api.Verifier, string, error)) {
	fake.listProductVerifiersMutex.Lock()
	defer fake.listProductVerifiersMutex.Unlock()
	fake.ListProductVerifiersStub = stub
}

func (fake *DisableProductVerifiersService) ListProductVerifiersArgsForCall(i int) string {
	fake.listProductVerifiersMutex.RLock()
	defer fake.listProductVerifiersMutex.RUnlock()
	argsForCall := fake.listProductVerifiersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *DisableProductVerifiersService) ListProductVerifiersReturns(result1 []api.Verifier, result2 string, result3 error) {
	fake.listProductVerifiersMutex.Lock()
	defer fake.listProductVerifiersMutex.Unlock()
	fake.ListProductVerifiersStub = nil
	fake.listProductVerifiersReturns = struct {
		result1 []api.Verifier
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *DisableProductVerifiersService) ListProductVerifiersReturnsOnCall(i int, result1 []api.Verifier, result2 string, result3 error) {
	fake.listProductVerifiersMutex.Lock()
	defer fake.listProductVerifiersMutex.Unlock()
	fake.ListProductVerifiersStub = nil
	if fake.listProductVerifiersReturnsOnCall == nil {
		fake.listProductVerifiersReturnsOnCall = make(map[int]struct {
			result1 []api.Verifier
			result2 string
			result3 error
		})
	}
	fake.listProductVerifiersReturnsOnCall[i] = struct {
		result1 []api.Verifier
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *DisableProductVerifiersService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableProductVerifiersMutex.RLock()
	defer fake.disableProductVerifiersMutex.RUnlock()
	fake.listProductVerifiersMutex.RLock()
	defer fake.listProductVerifiersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DisableProductVerifiersService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
