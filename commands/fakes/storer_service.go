// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	io "io"
	sync "sync"

	commands "github.com/pivotal-cf/om/commands"
)

type BlobStorer struct {
	DownloadFileStub        func(string) (io.ReadCloser, error)
	downloadFileMutex       sync.RWMutex
	downloadFileArgsForCall []struct {
		arg1 string
	}
	downloadFileReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	downloadFileReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	ListFilesStub        func() ([]string, error)
	listFilesMutex       sync.RWMutex
	listFilesArgsForCall []struct {
	}
	listFilesReturns struct {
		result1 []string
		result2 error
	}
	listFilesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BlobStorer) DownloadFile(arg1 string) (io.ReadCloser, error) {
	fake.downloadFileMutex.Lock()
	ret, specificReturn := fake.downloadFileReturnsOnCall[len(fake.downloadFileArgsForCall)]
	fake.downloadFileArgsForCall = append(fake.downloadFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DownloadFile", []interface{}{arg1})
	fake.downloadFileMutex.Unlock()
	if fake.DownloadFileStub != nil {
		return fake.DownloadFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.downloadFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *BlobStorer) DownloadFileCallCount() int {
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	return len(fake.downloadFileArgsForCall)
}

func (fake *BlobStorer) DownloadFileCalls(stub func(string) (io.ReadCloser, error)) {
	fake.downloadFileMutex.Lock()
	defer fake.downloadFileMutex.Unlock()
	fake.DownloadFileStub = stub
}

func (fake *BlobStorer) DownloadFileArgsForCall(i int) string {
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	argsForCall := fake.downloadFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *BlobStorer) DownloadFileReturns(result1 io.ReadCloser, result2 error) {
	fake.downloadFileMutex.Lock()
	defer fake.downloadFileMutex.Unlock()
	fake.DownloadFileStub = nil
	fake.downloadFileReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *BlobStorer) DownloadFileReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.downloadFileMutex.Lock()
	defer fake.downloadFileMutex.Unlock()
	fake.DownloadFileStub = nil
	if fake.downloadFileReturnsOnCall == nil {
		fake.downloadFileReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.downloadFileReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *BlobStorer) ListFiles() ([]string, error) {
	fake.listFilesMutex.Lock()
	ret, specificReturn := fake.listFilesReturnsOnCall[len(fake.listFilesArgsForCall)]
	fake.listFilesArgsForCall = append(fake.listFilesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListFiles", []interface{}{})
	fake.listFilesMutex.Unlock()
	if fake.ListFilesStub != nil {
		return fake.ListFilesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listFilesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *BlobStorer) ListFilesCallCount() int {
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	return len(fake.listFilesArgsForCall)
}

func (fake *BlobStorer) ListFilesCalls(stub func() ([]string, error)) {
	fake.listFilesMutex.Lock()
	defer fake.listFilesMutex.Unlock()
	fake.ListFilesStub = stub
}

func (fake *BlobStorer) ListFilesReturns(result1 []string, result2 error) {
	fake.listFilesMutex.Lock()
	defer fake.listFilesMutex.Unlock()
	fake.ListFilesStub = nil
	fake.listFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *BlobStorer) ListFilesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listFilesMutex.Lock()
	defer fake.listFilesMutex.Unlock()
	fake.ListFilesStub = nil
	if fake.listFilesReturnsOnCall == nil {
		fake.listFilesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listFilesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *BlobStorer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BlobStorer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.BlobStorer = new(BlobStorer)
