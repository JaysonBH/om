// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ExportConfigService struct {
	ExportConfigStub        func(product string) (api.ExportConfigOutput, error)
	exportConfigMutex       sync.RWMutex
	exportConfigArgsForCall []struct {
		product string
	}
	exportConfigReturns struct {
		result1 api.ExportConfigOutput
		result2 error
	}
	exportConfigReturnsOnCall map[int]struct {
		result1 api.ExportConfigOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ExportConfigService) ExportConfig(product string) (api.ExportConfigOutput, error) {
	fake.exportConfigMutex.Lock()
	ret, specificReturn := fake.exportConfigReturnsOnCall[len(fake.exportConfigArgsForCall)]
	fake.exportConfigArgsForCall = append(fake.exportConfigArgsForCall, struct {
		product string
	}{product})
	fake.recordInvocation("ExportConfig", []interface{}{product})
	fake.exportConfigMutex.Unlock()
	if fake.ExportConfigStub != nil {
		return fake.ExportConfigStub(product)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.exportConfigReturns.result1, fake.exportConfigReturns.result2
}

func (fake *ExportConfigService) ExportConfigCallCount() int {
	fake.exportConfigMutex.RLock()
	defer fake.exportConfigMutex.RUnlock()
	return len(fake.exportConfigArgsForCall)
}

func (fake *ExportConfigService) ExportConfigArgsForCall(i int) string {
	fake.exportConfigMutex.RLock()
	defer fake.exportConfigMutex.RUnlock()
	return fake.exportConfigArgsForCall[i].product
}

func (fake *ExportConfigService) ExportConfigReturns(result1 api.ExportConfigOutput, result2 error) {
	fake.ExportConfigStub = nil
	fake.exportConfigReturns = struct {
		result1 api.ExportConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *ExportConfigService) ExportConfigReturnsOnCall(i int, result1 api.ExportConfigOutput, result2 error) {
	fake.ExportConfigStub = nil
	if fake.exportConfigReturnsOnCall == nil {
		fake.exportConfigReturnsOnCall = make(map[int]struct {
			result1 api.ExportConfigOutput
			result2 error
		})
	}
	fake.exportConfigReturnsOnCall[i] = struct {
		result1 api.ExportConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *ExportConfigService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportConfigMutex.RLock()
	defer fake.exportConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ExportConfigService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
