// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type DisableDirectorVerifiersService struct {
	DisableDirectorVerifiersStub        func([]string) error
	disableDirectorVerifiersMutex       sync.RWMutex
	disableDirectorVerifiersArgsForCall []struct {
		arg1 []string
	}
	disableDirectorVerifiersReturns struct {
		result1 error
	}
	disableDirectorVerifiersReturnsOnCall map[int]struct {
		result1 error
	}
	ListDirectorVerifiersStub        func() ([]api.Verifier, error)
	listDirectorVerifiersMutex       sync.RWMutex
	listDirectorVerifiersArgsForCall []struct {
	}
	listDirectorVerifiersReturns struct {
		result1 []api.Verifier
		result2 error
	}
	listDirectorVerifiersReturnsOnCall map[int]struct {
		result1 []api.Verifier
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DisableDirectorVerifiersService) DisableDirectorVerifiers(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.disableDirectorVerifiersMutex.Lock()
	ret, specificReturn := fake.disableDirectorVerifiersReturnsOnCall[len(fake.disableDirectorVerifiersArgsForCall)]
	fake.disableDirectorVerifiersArgsForCall = append(fake.disableDirectorVerifiersArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("DisableDirectorVerifiers", []interface{}{arg1Copy})
	fake.disableDirectorVerifiersMutex.Unlock()
	if fake.DisableDirectorVerifiersStub != nil {
		return fake.DisableDirectorVerifiersStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.disableDirectorVerifiersReturns
	return fakeReturns.result1
}

func (fake *DisableDirectorVerifiersService) DisableDirectorVerifiersCallCount() int {
	fake.disableDirectorVerifiersMutex.RLock()
	defer fake.disableDirectorVerifiersMutex.RUnlock()
	return len(fake.disableDirectorVerifiersArgsForCall)
}

func (fake *DisableDirectorVerifiersService) DisableDirectorVerifiersCalls(stub func([]string) error) {
	fake.disableDirectorVerifiersMutex.Lock()
	defer fake.disableDirectorVerifiersMutex.Unlock()
	fake.DisableDirectorVerifiersStub = stub
}

func (fake *DisableDirectorVerifiersService) DisableDirectorVerifiersArgsForCall(i int) []string {
	fake.disableDirectorVerifiersMutex.RLock()
	defer fake.disableDirectorVerifiersMutex.RUnlock()
	argsForCall := fake.disableDirectorVerifiersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *DisableDirectorVerifiersService) DisableDirectorVerifiersReturns(result1 error) {
	fake.disableDirectorVerifiersMutex.Lock()
	defer fake.disableDirectorVerifiersMutex.Unlock()
	fake.DisableDirectorVerifiersStub = nil
	fake.disableDirectorVerifiersReturns = struct {
		result1 error
	}{result1}
}

func (fake *DisableDirectorVerifiersService) DisableDirectorVerifiersReturnsOnCall(i int, result1 error) {
	fake.disableDirectorVerifiersMutex.Lock()
	defer fake.disableDirectorVerifiersMutex.Unlock()
	fake.DisableDirectorVerifiersStub = nil
	if fake.disableDirectorVerifiersReturnsOnCall == nil {
		fake.disableDirectorVerifiersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableDirectorVerifiersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DisableDirectorVerifiersService) ListDirectorVerifiers() ([]api.Verifier, error) {
	fake.listDirectorVerifiersMutex.Lock()
	ret, specificReturn := fake.listDirectorVerifiersReturnsOnCall[len(fake.listDirectorVerifiersArgsForCall)]
	fake.listDirectorVerifiersArgsForCall = append(fake.listDirectorVerifiersArgsForCall, struct {
	}{})
	fake.recordInvocation("ListDirectorVerifiers", []interface{}{})
	fake.listDirectorVerifiersMutex.Unlock()
	if fake.ListDirectorVerifiersStub != nil {
		return fake.ListDirectorVerifiersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDirectorVerifiersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DisableDirectorVerifiersService) ListDirectorVerifiersCallCount() int {
	fake.listDirectorVerifiersMutex.RLock()
	defer fake.listDirectorVerifiersMutex.RUnlock()
	return len(fake.listDirectorVerifiersArgsForCall)
}

func (fake *DisableDirectorVerifiersService) ListDirectorVerifiersCalls(stub func() ([]api.Verifier, error)) {
	fake.listDirectorVerifiersMutex.Lock()
	defer fake.listDirectorVerifiersMutex.Unlock()
	fake.ListDirectorVerifiersStub = stub
}

func (fake *DisableDirectorVerifiersService) ListDirectorVerifiersReturns(result1 []api.Verifier, result2 error) {
	fake.listDirectorVerifiersMutex.Lock()
	defer fake.listDirectorVerifiersMutex.Unlock()
	fake.ListDirectorVerifiersStub = nil
	fake.listDirectorVerifiersReturns = struct {
		result1 []api.Verifier
		result2 error
	}{result1, result2}
}

func (fake *DisableDirectorVerifiersService) ListDirectorVerifiersReturnsOnCall(i int, result1 []api.Verifier, result2 error) {
	fake.listDirectorVerifiersMutex.Lock()
	defer fake.listDirectorVerifiersMutex.Unlock()
	fake.ListDirectorVerifiersStub = nil
	if fake.listDirectorVerifiersReturnsOnCall == nil {
		fake.listDirectorVerifiersReturnsOnCall = make(map[int]struct {
			result1 []api.Verifier
			result2 error
		})
	}
	fake.listDirectorVerifiersReturnsOnCall[i] = struct {
		result1 []api.Verifier
		result2 error
	}{result1, result2}
}

func (fake *DisableDirectorVerifiersService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableDirectorVerifiersMutex.RLock()
	defer fake.disableDirectorVerifiersMutex.RUnlock()
	fake.listDirectorVerifiersMutex.RLock()
	defer fake.listDirectorVerifiersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DisableDirectorVerifiersService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
