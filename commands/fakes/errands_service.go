// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ErrandsService struct {
	FindStub        func(productName string) (api.StagedProductsFindOutput, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		productName string
	}
	findReturns struct {
		result1 api.StagedProductsFindOutput
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 api.StagedProductsFindOutput
		result2 error
	}
	ListStagedProductErrandsStub        func(productID string) (api.ErrandsListOutput, error)
	listStagedProductErrandsMutex       sync.RWMutex
	listStagedProductErrandsArgsForCall []struct {
		productID string
	}
	listStagedProductErrandsReturns struct {
		result1 api.ErrandsListOutput
		result2 error
	}
	listStagedProductErrandsReturnsOnCall map[int]struct {
		result1 api.ErrandsListOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ErrandsService) Find(productName string) (api.StagedProductsFindOutput, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		productName string
	}{productName})
	fake.recordInvocation("Find", []interface{}{productName})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(productName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReturns.result1, fake.findReturns.result2
}

func (fake *ErrandsService) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *ErrandsService) FindArgsForCall(i int) string {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].productName
}

func (fake *ErrandsService) FindReturns(result1 api.StagedProductsFindOutput, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 api.StagedProductsFindOutput
		result2 error
	}{result1, result2}
}

func (fake *ErrandsService) FindReturnsOnCall(i int, result1 api.StagedProductsFindOutput, result2 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 api.StagedProductsFindOutput
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 api.StagedProductsFindOutput
		result2 error
	}{result1, result2}
}

func (fake *ErrandsService) ListStagedProductErrands(productID string) (api.ErrandsListOutput, error) {
	fake.listStagedProductErrandsMutex.Lock()
	ret, specificReturn := fake.listStagedProductErrandsReturnsOnCall[len(fake.listStagedProductErrandsArgsForCall)]
	fake.listStagedProductErrandsArgsForCall = append(fake.listStagedProductErrandsArgsForCall, struct {
		productID string
	}{productID})
	fake.recordInvocation("ListStagedProductErrands", []interface{}{productID})
	fake.listStagedProductErrandsMutex.Unlock()
	if fake.ListStagedProductErrandsStub != nil {
		return fake.ListStagedProductErrandsStub(productID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStagedProductErrandsReturns.result1, fake.listStagedProductErrandsReturns.result2
}

func (fake *ErrandsService) ListStagedProductErrandsCallCount() int {
	fake.listStagedProductErrandsMutex.RLock()
	defer fake.listStagedProductErrandsMutex.RUnlock()
	return len(fake.listStagedProductErrandsArgsForCall)
}

func (fake *ErrandsService) ListStagedProductErrandsArgsForCall(i int) string {
	fake.listStagedProductErrandsMutex.RLock()
	defer fake.listStagedProductErrandsMutex.RUnlock()
	return fake.listStagedProductErrandsArgsForCall[i].productID
}

func (fake *ErrandsService) ListStagedProductErrandsReturns(result1 api.ErrandsListOutput, result2 error) {
	fake.ListStagedProductErrandsStub = nil
	fake.listStagedProductErrandsReturns = struct {
		result1 api.ErrandsListOutput
		result2 error
	}{result1, result2}
}

func (fake *ErrandsService) ListStagedProductErrandsReturnsOnCall(i int, result1 api.ErrandsListOutput, result2 error) {
	fake.ListStagedProductErrandsStub = nil
	if fake.listStagedProductErrandsReturnsOnCall == nil {
		fake.listStagedProductErrandsReturnsOnCall = make(map[int]struct {
			result1 api.ErrandsListOutput
			result2 error
		})
	}
	fake.listStagedProductErrandsReturnsOnCall[i] = struct {
		result1 api.ErrandsListOutput
		result2 error
	}{result1, result2}
}

func (fake *ErrandsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.listStagedProductErrandsMutex.RLock()
	defer fake.listStagedProductErrandsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ErrandsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
