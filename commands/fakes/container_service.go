// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	commands "github.com/pivotal-cf/om/commands"
)

type Container struct {
	ItemStub        func(string) (commands.Item, error)
	itemMutex       sync.RWMutex
	itemArgsForCall []struct {
		arg1 string
	}
	itemReturns struct {
		result1 commands.Item
		result2 error
	}
	itemReturnsOnCall map[int]struct {
		result1 commands.Item
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Container) Item(arg1 string) (commands.Item, error) {
	fake.itemMutex.Lock()
	ret, specificReturn := fake.itemReturnsOnCall[len(fake.itemArgsForCall)]
	fake.itemArgsForCall = append(fake.itemArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Item", []interface{}{arg1})
	fake.itemMutex.Unlock()
	if fake.ItemStub != nil {
		return fake.ItemStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.itemReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Container) ItemCallCount() int {
	fake.itemMutex.RLock()
	defer fake.itemMutex.RUnlock()
	return len(fake.itemArgsForCall)
}

func (fake *Container) ItemCalls(stub func(string) (commands.Item, error)) {
	fake.itemMutex.Lock()
	defer fake.itemMutex.Unlock()
	fake.ItemStub = stub
}

func (fake *Container) ItemArgsForCall(i int) string {
	fake.itemMutex.RLock()
	defer fake.itemMutex.RUnlock()
	argsForCall := fake.itemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Container) ItemReturns(result1 commands.Item, result2 error) {
	fake.itemMutex.Lock()
	defer fake.itemMutex.Unlock()
	fake.ItemStub = nil
	fake.itemReturns = struct {
		result1 commands.Item
		result2 error
	}{result1, result2}
}

func (fake *Container) ItemReturnsOnCall(i int, result1 commands.Item, result2 error) {
	fake.itemMutex.Lock()
	defer fake.itemMutex.Unlock()
	fake.ItemStub = nil
	if fake.itemReturnsOnCall == nil {
		fake.itemReturnsOnCall = make(map[int]struct {
			result1 commands.Item
			result2 error
		})
	}
	fake.itemReturnsOnCall[i] = struct {
		result1 commands.Item
		result2 error
	}{result1, result2}
}

func (fake *Container) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.itemMutex.RLock()
	defer fake.itemMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Container) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.Container = new(Container)
